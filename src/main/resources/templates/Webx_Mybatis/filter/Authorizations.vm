package ${basePackage}.auth.filter;

import ${basePackage}.auth.mgr.TokenManager;
import ${basePackage}.auth.po.TokenPO;
import ${basePackage}.auth.request.TokenGetRequest;
import ${basePackage}.auth.response.TokenGetResponse;
import ${basePackage}.framework.CookieUtil;
import ${basePackage}.framework.LocalData;
import ${basePackage}.framework.Token;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

/**
 * 登录验证过滤器
 *
 * @author wangbing
 * @Time 2017-01-01
 * @version 0.0.1
 */

public class Authorizations implements Filter {

    ApplicationContext applicationContext;
    ServletContext context;
    TokenManager tokenManager;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        context = filterConfig.getServletContext();
        applicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(context);
        tokenManager = applicationContext.getBean(TokenManager.class);
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        /* 获取要访问的路径 */
        HttpServletRequest httpServletRequest = (HttpServletRequest) request;
        HttpServletResponse httpServletResponse = (HttpServletResponse) response;

        HttpSession session = httpServletRequest.getSession();
        String path = httpServletRequest.getRequestURI();

        //以下页面是不需要登录的,放行
        if (path.contains("login")) {
            chain.doFilter(request, response);
            return;
        }

        //客户端接口
        if (path.contains("api.do")){
            Token token = (Token) session.getAttribute("token");
            if (token == null){
                token = tryGetToken(httpServletRequest, httpServletResponse);
            }
            LocalData.setToken(token);
            chain.doFilter(request, response);
            return;
        }

        //静态文件url不需要验证权限,放行
        String[] suffixes = {".css", ".js", "$", ".jpg", ".eot", "svg", "less", ".gif", ".png", ".ttf", ".woff", ".ico", ".xls"};
        for (String suffix : suffixes) {
            if (path.contains(suffix)) {
                chain.doFilter(request, response);
                return;
            }
        }

        //其他页面需要验证权限url权限
        Token token = (Token) session.getAttribute("token");
        if (token == null) {
            token = tryGetToken(httpServletRequest, httpServletResponse);

            if (token != null) {
                session.setAttribute("token", new Token());
            } else {
                gotoLoginPage(request, response, chain, httpServletRequest, httpServletResponse);
                return;
            }
        }
        LocalData.setToken(token);
        if (token.hasFunction(path)) {
            chain.doFilter(request, response);
        } else {
            String returnUrl = httpServletRequest.getHeader("Referer");
            gotoUnAccessPage(request, response, chain, httpServletRequest, httpServletResponse, returnUrl);
            return;
        }
    }

    private Token tryGetToken(HttpServletRequest request, HttpServletResponse response) {
        String tokenId = CookieUtil.getCookieValue(request.getCookies(), "tokenId");
        if (tokenId == null){
            tokenId = request.getParameter("tokenId");
        }

        if (tokenId != null) {
            long l = 0L;
            try {
                l = Long.parseLong(tokenId);
            } catch (Exception e) {
                return null;
            }

            TokenGetRequest tokenGetRequest = new TokenGetRequest();
            tokenGetRequest.setId(l);
            TokenGetResponse tokenGetResponse = tokenManager.get(tokenGetRequest, null);
            if (!tokenGetResponse.hasError()) {
                TokenPO tokenPO = tokenGetResponse.getTokenPO();

                String ip = getIp(request);
                String infoClinet = getInfoClinet(request);

                if (tokenPO.getIpAddress().equals(ip) && tokenPO.getClientInfo().equals(infoClinet)) {

                    Token token = new Token();
                    token.setId(tokenPO.getId());
                    token.setUserId(tokenPO.getUserId());
                    token.setUserName(tokenPO.getUserName());
                }

            }
        }
        return null;
    }

    private String getIp(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for");
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        return ip;
    }

    private String getInfoClinet(HttpServletRequest request) {
        return request.getHeader("User-Agent");
    }

    private void gotoLoginPage(ServletRequest request, ServletResponse response, FilterChain chain, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {
        String basePath = httpServletRequest.getScheme() + "://" + httpServletRequest.getServerName() + ":" + httpServletRequest.getServerPort() + httpServletRequest.getContextPath();
        httpServletResponse.sendRedirect(basePath + "/login.htm");
        chain.doFilter(request, response);
        return;
    }

    private void gotoUnAccessPage(ServletRequest request, ServletResponse response, FilterChain chain, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, String returnUrl) throws IOException, ServletException {
        String basePath = httpServletRequest.getScheme() + "://" + httpServletRequest.getServerName() + ":" + httpServletRequest.getServerPort() + httpServletRequest.getContextPath();
        String s = basePath + "/unAccess.htm?returnUrl=" + (returnUrl == null ? "" : returnUrl);
        httpServletResponse.sendRedirect(s);
        chain.doFilter(request, response);
        return;
    }

    @Override
    public void destroy() {
    }
}
