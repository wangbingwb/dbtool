package ${basePackage}.auth.filter;

import ${basePackage}.framework.UserToken;
import ${basePackage}.framework.CookieUtil;
import ${basePackage}.framework.LocalData;
import ${basePackage}.framework.UserToken;
import com.alibaba.citrus.webx.servlet.WebxFrameworkFilter;
import org.springframework.util.StringUtils;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

/**
 * 登录验证过滤器
 *
 * @author wangbing
 * @version 0.0.1
 * @since 2017-01-01
 */
public class Authorizations extends WebxFrameworkFilter {

    @Override
    protected void initFrameworkFilter() {
        super.initFrameworkFilter();
    }

    @Override
    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {
        /* 获取要访问的路径 */
        HttpSession session = request.getSession();
        String path = request.getRequestURI();

        //静态文件url不需要验证权限,放行
        String[] suffixes = {".css", ".js", "$", ".jpg", ".eot", "svg", "less", ".gif", ".png", ".ttf", ".woff", ".ico", ".xls"};
        for (String suffix : suffixes) {
            if (path.contains(suffix)) {
                super.doFilter(request, response, chain);
                return;
            }
        }

        UserToken token = tryGetTokenByCookie(request, response);
        LocalData.setToken(token);

        if ("/".equals(path) && token == null) {
            gotoLoginPage(request, response, null);
            return;
        } else if ("/".equals(path) && token != null) {
            gotoIndexPage(request, response);
            return;
        } else if (path.endsWith("ajax.do")) {
            super.doFilter(request, response, chain);
            return;
        } else if (path.contains("login.htm")) {
            super.doFilter(request, response, chain);
            return;
        } else if (!path.endsWith(".htm")) {
            gotoHtmPage(request, response);
            return;
        }

        if (token == null) {
            String returnUrl = request.getHeader("Referer");
            gotoLoginPage(request, response, returnUrl);
            return;
        }

        if (!token.hasFunction(path)) {
            String returnUrl = request.getHeader("Referer");
            gotoUnAccessPage(request, response, returnUrl);
            return;
        }
        super.doFilter(request, response, chain);
    }

    /**
     * 尝试获得Token
     *
     * @param request
     * @param response
     * @return
     */
    private UserToken tryGetTokenByCookie(HttpServletRequest request, HttpServletResponse response) {
        String tokenId = CookieUtil.getCookieValue(request.getCookies(), "tokenId");

        return null;
    }

    /**
     * 获取用户IP地址
     *
     * @param request
     * @return
     */
    private String getIp(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for");
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        return ip;
    }

    /**
     * 获取用户客户端信息
     *
     * @param request
     * @return
     */
    private String getInfoClinet(HttpServletRequest request) {
        return request.getHeader("User-Agent");
    }

    /**
     * 重定向至登录页面
     *
     * @param httpServletRequest
     * @param httpServletResponse
     * @param returnUrl
     * @throws IOException
     * @throws ServletException
     */
    private void gotoLoginPage(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, String returnUrl) throws IOException, ServletException {
        String basePath = httpServletRequest.getScheme() + "://" + httpServletRequest.getServerName() + ":" + httpServletRequest.getServerPort() + httpServletRequest.getContextPath();
        httpServletResponse.sendRedirect(basePath + "/login.htm" + (returnUrl == null ? "" : "?returnUrl=" + returnUrl));
    }

    /**
     * 重定向至主页
     *
     * @param httpServletRequest
     * @param httpServletResponse
     * @throws IOException
     * @throws ServletException
     */
    private void gotoIndexPage(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {
        String basePath = httpServletRequest.getScheme() + "://" + httpServletRequest.getServerName() + ":" + httpServletRequest.getServerPort() + httpServletRequest.getContextPath();
        httpServletResponse.sendRedirect(basePath + "/login.htm");
    }

    /**
     * 重定向至.htm后缀
     *
     * @param httpServletRequest
     * @param httpServletResponse
     * @throws IOException
     * @throws ServletException
     */
    private void gotoHtmPage(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {
        String basePath = httpServletRequest.getScheme() + "://" + httpServletRequest.getServerName() + ":" + httpServletRequest.getServerPort() + httpServletRequest.getContextPath();
        String path = httpServletRequest.getRequestURI();
        String queryString = httpServletRequest.getQueryString();
        if (StringUtils.isEmpty(queryString)) {
            httpServletResponse.sendRedirect(basePath + path + ".htm");
        } else {
            httpServletResponse.sendRedirect(basePath + path + ".htm?" + queryString);
        }
    }

    /**
     * 重定向至权限不足页面
     *
     * @param httpServletRequest
     * @param httpServletResponse
     * @param returnUrl
     * @throws IOException
     * @throws ServletException
     */
    private void gotoUnAccessPage(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, String returnUrl) throws IOException, ServletException {
        String basePath = httpServletRequest.getScheme() + "://" + httpServletRequest.getServerName() + ":" + httpServletRequest.getServerPort() + httpServletRequest.getContextPath();
        String s = basePath + "/unAccess.htm?returnUrl=" + (returnUrl == null ? "" : returnUrl);
        httpServletResponse.sendRedirect(s);
        return;
    }
}

