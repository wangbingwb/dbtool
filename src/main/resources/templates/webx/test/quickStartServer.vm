import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.nio.SelectChannelConnector;
import org.eclipse.jetty.webapp.WebAppClassLoader;
import org.eclipse.jetty.webapp.WebAppContext;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import java.io.File;

/**
 * 使用Jetty运行调试Web应用, 在Console输入回车快速重新加载应用.
 *
 */
public class QuickStartServer {

    public static final int PORT = 80;
    public static final String CONTEXT = "/";
    public static final String ANTX_PROPERTIES = "conf/dev.env.properties";
//	public static final String[] TLD_JAR_NAMES = new String[] { "sitemesh", "spring-webmvc", "shiro-web",
//			"springside-core" };

    public static void main(String[] args) throws Exception {
        // 设定Spring的profile
        System.setProperty("spring.profiles.active", "development");
        System.setProperty("productionMode", "true");
        //读取antx.properties
//        File antx = new File(ANTX_PROPERTIES);
//        if (!antx.exists()) {
//            antx = new File("src/main", ANTX_PROPERTIES);
//        }
//        if (antx.exists() && antx.isFile()) {
//            Properties p = new Properties();
//            FileInputStream in = new FileInputStream(antx);
//            p.load(in);
//            IOUtils.closeQuietly(in);
//            for (Map.Entry<Object, Object> entry : p.entrySet()) {
//                System.getProperties().put(entry.getKey(), entry.getValue());
//            }
//        }else{
//            System.setProperty("omp.loggingLevel", "warn");
//            System.setProperty("omp.loggingRoot", "d:/logs");
//            System.setProperty("productionMode", "false");
//        }

        // 启动Jetty
        Server server = JettyFactory.createServerInSource(PORT, CONTEXT);
//		JettyFactory.setTldJarNames(server, TLD_JAR_NAMES);
//        initSSL();
        try {
            server.start();


            System.out.println("Server running at http://localhost:" + PORT + CONTEXT);
            System.out.println("Hit Enter to reload the application quickly");

            while (true) {
                char c = (char) System.in.read();
                if (c == '\n') {
                    JettyFactory.reloadContext(server);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }



    private static void initSSL() throws Exception {
        HostnameVerifier hv = new HostnameVerifier() {
            public boolean verify(String urlHostName, SSLSession session) {
                System.out.println("Warning: URL Host: " + urlHostName + " vs. "
                        + session.getPeerHost());
                return true;
            }
        };
        trustAllHttpsCertificates();
        HttpsURLConnection.setDefaultHostnameVerifier(hv);
    }

    private static void trustAllHttpsCertificates() throws Exception {
        javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[1];
        javax.net.ssl.TrustManager tm = new XTM();
        trustAllCerts[0] = tm;
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext
                .getInstance("SSL");
        sc.init(null, trustAllCerts, null);
        HttpsURLConnection.setDefaultSSLSocketFactory(sc
                .getSocketFactory());
    }

    static class XTM implements javax.net.ssl.TrustManager,
            javax.net.ssl.X509TrustManager {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }

        public boolean isServerTrusted(
                java.security.cert.X509Certificate[] certs) {
            return true;
        }

        public boolean isClientTrusted(
                java.security.cert.X509Certificate[] certs) {
            return true;
        }

        public void checkServerTrusted(
                java.security.cert.X509Certificate[] certs, String authType)
                throws java.security.cert.CertificateException {
            return;
        }

        public void checkClientTrusted(
                java.security.cert.X509Certificate[] certs, String authType)
                throws java.security.cert.CertificateException {
            return;
        }
    }
}

class JettyFactory {

    private static final String DEFAULT_WEBAPP_PATH = "src/main/webapp";
    private static final String DEFAULT_PARENTWEBAPP_PATH = "web/src/main/webapp";
    private static final String WINDOWS_WEBDEFAULT_PATH = "webdefault-windows.xml";

    /**
     * 创建用于开发运行调试的Jetty Server, 以src/main/webapp为Web应用目录.
     */
    public static Server createServerInSource(int port, String contextPath) {
        Server server = new Server();
        server.setAttribute("org.eclipse.jetty.server.Request.maxFormContentSize", -1);
        // 设置在JVM退出时关闭Jetty的钩子。
        server.setStopAtShutdown(true);

        SelectChannelConnector connector = new SelectChannelConnector();
        connector.setPort(port);
        // 解决Windows下重复启动Jetty居然不报告端口冲突的问题.
        connector.setReuseAddress(false);
        server.setConnectors(new Connector[] { connector });
        File ctxPath = new File(DEFAULT_WEBAPP_PATH);
        if (!ctxPath.exists() || !ctxPath.isDirectory()) {
            ctxPath = new File(DEFAULT_PARENTWEBAPP_PATH);
        }
        WebAppContext webContext = new WebAppContext(ctxPath.getPath(), contextPath);
        // 修改webdefault.xml，解决Windows下Jetty Lock住静态文件的问题.
        webContext.setDefaultsDescriptor(WINDOWS_WEBDEFAULT_PATH);
        server.setHandler(webContext);

        return server;
    }

    /**
     * 设置除jstl-*.jar外其他含tld文件的jar包的名称.
     * jar名称不需要版本号，如sitemesh, shiro-web
     */
    public static void setTldJarNames(Server server, String... jarNames) {
		/*WebAppContext context = (WebAppContext) server.getHandler();
		List<String> jarNameExprssions = Lists.newArrayList(".*//*jstl-[^/]*\\.jar$", ".*//*.*taglibs[^/]*\\.jar$");
		for (String jarName : jarNames) {
			jarNameExprssions.add(".*//*" + jarName + "-[^/]*\\.jar$");
		}

		context.setAttribute("org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern",
				StringUtils.join(jarNameExprssions, '|'));
*/
    }

    /**
     * 快速重新启动application，重载target/classes与target/test-classes.
     */
    public static void reloadContext(Server server) throws Exception {
        WebAppContext context = (WebAppContext) server.getHandler();

        System.out.println("Application reloading");
        context.stop();

        WebAppClassLoader classLoader = new WebAppClassLoader(context);
        File target = new File("web/target/classes");
        if (!target.exists()) {
            target = new File("target/classes");
        }
        classLoader.addClassPath(target.getPath());
//		classLoader.addClassPath("target/test-classes");
        context.setClassLoader(classLoader);

        context.start();

        System.out.println("Application reloaded");
    }
}
